#+title: Hacking Guix Home Services in the REPL
#+date: [2023-01-06 Fri]
#+video: KNXOZtbfslY

* Updates

- Introductory video on Guix Home coming soon!

- Check out this blog post about Guix:

  https://guix.gnu.org/en/blog/2023/dissecting-guix-part-1-derivations/

- Join us on the Fediverse!  https://emacs.ch or https://fosstodon.org

  Follow me: @daviwil@fosstodon.org / https://fosstodon.org/@daviwil

- Support the channel!  *Buy Mastering Emacs* with this link https://www.masteringemacs.org/r/systemcrafters

* Hacking Guix Home Services in the REPL

Today I want to spend some time learning how to hack on Guix Home services in the Guile REPL so that I can build up a service without running =guix home container= a bunch of times!

#+begin_src scheme

  (use-modules (guix store))

  (let* ((server (open-connection))
         (path (add-text-to-store server "hello.txt" "Hello Guix!")))
    (display "The store path is: ")
    (display path)
    (newline)
    (close-connection server))

#+end_src

=(build-derivations store derivations [mode])=: Builds a list of derivations against the given store

#+begin_src scheme

  (define (sh-symlink)
    (gexp->derivation "sh"
                      #~(symlink (string-append #$bash "/bin/bash")
                                  #$output)))

  (run-with-store (open-connection) (sh-symlink))

#+end_src

#+begin_src scheme

  ;; guix home -L ~/.dotfiles container test-config.scm

  (use-modules (gnu home)
                (gnu services)
                (daviwil home-services emacs))

  (home-environment
    (services (list (service home-emacs-service-type
                            (home-emacs-configuration
                              (modules (home-emacs-module-configuration
                                        (module-name "dw-core")
                                        ;; (variables '(("dw-core-use-something" . #t)))
                                        ))
                              (extra-init ";; Foo!"))))))
#+end_src

* Notes

You can build a g-exp in the REPL by running the following command:

#+begin_src scheme

  ,build (scheme-file "test.scm" my-g-expr)

#+end_src
